#!/usr/bin/env python3
# Count participants with 'Sleep Apnea' or 'Insomnia' in CSV/TSV/JSON/XLSX.
import argparse, os, re, sys
import pandas as pd

KEYWORDS = {'sleep_apnea': re.compile(r'\bsleep\s*apnea\b', re.I),
            'insomnia': re.compile(r'\binsomnia\b', re.I)}
DEFAULT_COLUMNS = ['diagnosis','diagnoses','conditions','medical_history','condition','problem_list','comorbidities']

def load_table(path):
    ext = os.path.splitext(path)[1].lower()
    if ext=='.csv': return pd.read_csv(path, dtype=str, keep_default_na=False)
    if ext=='.tsv': return pd.read_csv(path, sep='\t', dtype=str, keep_default_na=False)
    if ext in ('.xlsx','.xls'): return pd.read_excel(path, dtype=str)
    if ext=='.json': return pd.read_json(path, dtype=False)
    raise ValueError('Unsupported extension')

def tokens(cell):
    if pd.isna(cell): return []
    s = str(cell).strip()
    for sep in [';', '|', '/', ',', '\n']: s = s.replace(sep, ';')
    return [t.strip() for t in s.split(';') if t.strip()]

def has_pattern(vals, pat):
    for v in vals:
        if not v: continue
        if pat.search(v): return True
        for t in tokens(v):
            if pat.search(t): return True
    return False

def main():
    p = argparse.ArgumentParser()
    p.add_argument('file'); p.add_argument('--columns', default=None)
    p.add_argument('--id-column', default=None)
    args = p.parse_args()
    df = load_table(args.file)
    if args.columns:
        cols = [c.strip() for c in args.columns.split(',')]
    else:
        cols = [c for c in DEFAULT_COLUMNS if c in df.columns]
        if not cols: cols = [c for c,d in df.dtypes.items() if d==object]
    if not cols:
        print('No text columns found. Use --columns to specify.'); sys.exit(2)
    apnea_ids, insomnia_ids = set(), set()
    apnea_rows = insomnia_rows = 0
    for i, row in df.iterrows():
        vals = [str(row[c]) if c in row else '' for c in cols]
        a = has_pattern(vals, KEYWORDS['sleep_apnea'])
        ins = has_pattern(vals, KEYWORDS['insomnia'])
        if a: apnea_rows += 1
        if ins: insomnia_rows += 1
        if args.id_column and args.id_column in df.columns:
            pid = row.get(args.id_column) or f'__r{i}'
            if a: apnea_ids.add(pid)
            if ins: insomnia_ids.add(pid)
    if args.id_column and args.id_column in df.columns:
        print('Sleep Apnea (unique participants):', len(apnea_ids))
        print('Insomnia (unique participants):', len(insomnia_ids))
        print('Both:', len(apnea_ids & insomnia_ids))
        print('Either:', len(apnea_ids | insomnia_ids))
    else:
        import numpy as np
        apnea_mask = df.apply(lambda r: has_pattern([str(r[c]) if c in r else '' for c in cols], KEYWORDS['sleep_apnea']), axis=1)
        insomnia_mask = df.apply(lambda r: has_pattern([str(r[c]) if c in r else '' for c in cols], KEYWORDS['insomnia']), axis=1)
        print('Sleep Apnea (rows):', int(apnea_mask.sum()))
        print('Insomnia (rows):', int(insomnia_mask.sum()))
        print('Both (rows):', int(((apnea_mask)&(insomnia_mask)).sum()))
        print('Either (rows):', int(((apnea_mask)|(insomnia_mask)).sum()))

if __name__=='__main__':
    main()